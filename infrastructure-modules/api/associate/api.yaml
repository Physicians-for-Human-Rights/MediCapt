swagger: '2.0'
info:
  description: |
    Medicapt API for healthcare associates
  version: 1.0.0
  title: Medicapt API - Associates
  termsOfService: TODO
  contact:
    email: TODO@TODO.TODO
  license:
    name: TODO
    url: https://associate-api.dev.dev-medicapt.org
securityDefinitions:
  CognitoUserProvider:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      type: cognito_user_pools
      providerARNs:
        - ${cognito_user_pool_associate_arn}
x-amazon-apigateway-gateway-responses:
  ACCESS_DENIED:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,POST,GET,OPTIONS,PUT,PATCH'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,POST,GET,OPTIONS,PUT,PATCH'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,POST,GET,OPTIONS,PUT,PATCH'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  MISSING_AUTHENTICATION_TOKEN:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,POST,GET,OPTIONS,PUT,PATCH'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
security:
  - CognitoUserProvider: []
schemes:
  - https
paths:
  /associate/share/record/byId/{shareId}:
    get:
      security:
        - CognitoUserProvider: []
      tags:
        - share
      summary: Get a share metadata, the record, and the form by share ID
      operationId: associateGetSharedRecordById
      produces:
        - application/json
      parameters:
        - name: shareId
          in: path
          description: ID of the record to return
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Share'
        400:
          description: Invalid ID supplied
        404:
          description: Record not found
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_associateGetSharedRecordById}
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'NEVER'
        httpMethod: 'POST'
        type: 'aws_proxy'
    delete:
      security:
        - CognitoUserProvider: []
      tags:
        - share
      summary: Deletes a record share. You lose access to this record.
      operationId: associateDeleteSharedRecordById
      produces:
        - application/json
      parameters:
        - name: shareId
          in: path
          description: ID of share to delete
          required: true
          type: string
          format: uuid
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Record not found
        405:
          description: Record already sealed
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_associateDeleteSharedRecordById}
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'NEVER'
        httpMethod: 'POST'
        type: 'aws_proxy'
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          'default':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,AcceptedVersions'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Max-Age: "'86400'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
            Access-Control-Max-Age:
              type: 'string'
  /associate/share/record:
    get:
      security:
        - CognitoUserProvider: []
      tags:
        - share
      summary: Get record shares
      operationId: associateGetRecordShares
      produces:
        - application/json
      parameters:
        - in: query
          name: offset
          type: integer
          required: false
          default: 0
          minimum: 0
          description: The number of items to skip before starting to collect the result set.
        - in: query
          name: limit
          type: integer
          required: false
          default: 20
          minimum: 1
          maximum: 100
          description: The numbers of items to return.
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Share'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        400:
          description: Invalid status value
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_associateGetRecordShares}
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'NEVER'
        httpMethod: 'POST'
        type: 'aws_proxy'
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          'default':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,AcceptedVersions'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Max-Age: "'86400'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
            Access-Control-Max-Age:
              type: 'string'
  /associate/user/byId/{poolId}/{username}:
    get:
      security:
        - CognitoUserProvider: []
      tags:
        - User
      summary: Get a user by ID
      operationId: associateGetUserById
      produces:
        - application/json
        - application/xml
      parameters:
        - name: poolId
          in: path
          description: The pool ID of this user
          required: true
          type: string
        - name: username
          in: path
          description: ID of the user to return
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_associateGetUserById}
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'NEVER'
        httpMethod: 'POST'
        type: 'aws_proxy'
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          'default':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,AcceptedVersions'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Max-Age: "'86400'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
            Access-Control-Max-Age:
              type: 'string'
  /associate/user/byUUID/{poolId}/{uuid}:
    get:
      security:
        - CognitoUserProvider: []
      tags:
        - User
      summary: Get a user by ID
      operationId: associateGetUserByUUID
      produces:
        - application/json
        - application/xml
      parameters:
        - name: poolId
          in: path
          description: The pool ID of this user
          required: true
          type: string
        - name: uuid
          in: path
          description: UUID of the user to return
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_associateGetUserByUUID}
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'NEVER'
        httpMethod: 'POST'
        type: 'aws_proxy'
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          'default':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,AcceptedVersions'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Max-Age: "'86400'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
            Access-Control-Max-Age:
              type: 'string'
  /associate/user/byUUIDAnyPool/{uuid}:
    get:
      security:
        - CognitoUserProvider: []
      tags:
        - User
      summary: Get a user by ID from any pool
      operationId: associateGetUserByUUIDAnyPool
      produces:
        - application/json
        - application/xml
      parameters:
        - name: uuid
          in: path
          description: UUID of the user to return
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_associateGetUserByUUIDAnyPool}
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'NEVER'
        httpMethod: 'POST'
        type: 'aws_proxy'
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          'default':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,AcceptedVersions'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Max-Age: "'86400'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
            Access-Control-Max-Age:
              type: 'string'
  /associate/location/byId/{locationId}:
    get:
      security:
        - CognitoUserProvider: []
      tags:
        - Location
      summary: Get a location by ID
      operationId: associateGetLocationById
      produces:
        - application/json
        - application/xml
      parameters:
        - name: locationId
          in: path
          description: ID of the location to return
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Location'
        400:
          description: Invalid ID supplied
        404:
          description: Location not found
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_associateGetLocationById}
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'NEVER'
        httpMethod: 'POST'
        type: 'aws_proxy'
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          'default':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,AcceptedVersions'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Max-Age: "'86400'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
            Access-Control-Max-Age:
              type: 'string'
definitions:
  Empty: {}
  RecordMetadata:
    type: object
    properties:
      form_id:
        type: string
        format: uuid
      createdAt:
        type: string
        format: date
      name:
        type: string
      age:
        type: number
      editedAt:
        type: string
        format: date
      form_contents:
        type: object
  Record:
    type: object
    properties:
      form_uuid:
        type: string
        format: uuid
      name:
        type: string
      form_contents:
        type: object
  FormMetadata:
    type: object
    properties:
      formUUID:
        type: string
        format: uuid
      name:
        type: string
      subtitle:
        type: string
      country:
        type: string
      version:
        type: string
      tag:
        type: string
      form_id:
        type: string
  Form:
    type: object
    properties:
      form_uuid:
        type: string
        format: uuid
      form_details:
        type: object
  Share:
    type: object
    properties:
      shareUUID:
        type: string
        format: uuid
      formMetadata:
        type: object
      form:
        type: object

swagger: '2.0'
info:
  description: |
    Medicapt API for providers
  version: 1.0.0
  title: Medicapt API --- Providers
  termsOfService: TODO
  contact:
    email: TODO@TODO.TODO
  license:
    name: TODO
    url: https://TODO
securityDefinitions:
  CognitoUserProvider:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      type: cognito_user_pools
      providerARNs:
      - ${cognito_user_pool_provider_arn}
security:
  - CognitoUserProvider: []
schemes:
- https
paths:
  /provider/record:
    post:
      tags:
      - record
      summary: Add a new record
      consumes:
      - application/json
      produces:
      - application/json
      operationId: providerCreateRecord
      parameters:
      - in: body
        name: body
        description: Create a new record
        required: true
        schema:
          $ref: '#/definitions/Record'
      responses:
        405:
          description: Invalid input
          schema:
            $ref: '#/definitions/Record'
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerCreateRecord}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
  /provider/record/{recordId}:
    get:
      tags:
      - record
      summary: Get a record by ID
      operationId: providerGetRecordById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: recordId
        in: path
        description: ID of the record to return
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Record'
        400:
          description: Invalid ID supplied
        404:
          description: Record not found
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerGetRecordById}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
    post:
      tags:
      - record
      summary: Update an existing record
      operationId: providerUpdateRecordById
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: recordId
        in: path
        description: ID of the record to return
        required: true
        type: string
        format: uuid
      - in: body
        name: body
        description: Updated record
        required: true
        schema:
          $ref: '#/definitions/Record'
      responses:
        400:
          description: Record already sealed
        404:
          description: Record not found
        405:
          description: Validation exception
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerUpdateRecordById}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
    delete:
      tags:
      - record
      summary: Deletes a record
      operationId: providerDeleteRecordById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: recordId
        in: path
        description: ID of record to delete
        required: true
        type: string
        format: uuid
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Record not found
        405:
          description: Record already sealed
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerDeleteRecordById}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
  /provider/seal_record/{recordId}:
    post:
      tags:
      - record
      summary: Update an existing record
      operationId: providerSealRecordById
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: recordId
        in: path
        description: ID of record to return
        required: true
        type: string
        format: uuid
      responses:
        400:
          description: Record already sealed
        404:
          description: Record not found
        405:
          description: Validation exception
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerSealRecordById}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
  /provider/record_image/{recordId}:
    post:
      tags:
      - record
      summary: Upload an image for a record
      operationId: providerUploadImageForRecordBy
      consumes:
       - multipart/form-data
      produces:
      - application/json
      parameters:
      - in: formData
        name: upfile
        type: file
        required: true
        description: The file to upload.
      - in: formData
        name: formTag
        type: string
        required: true
        description: Tag in the form that this image corresopnds to.
      - name: recordId
        in: path
        description: ID of record to return
        required: true
        type: string
        format: uuid
      responses:
        400:
          description: Record already sealed
        404:
          description: Record not found
        405:
          description: Validation exception
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerUploadImageForRecordBy}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
  /provider/record_image/{recordId}/{formTag}:
    get:
      tags:
      - record
      summary: Get an image in a record
      operationId: providerGetImageByFormTag
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: recordId
        in: path
        description: The record id
        required: true
        type: string
        format: uuid
      - name: formTag
        in: path
        description: The form tag for this image
        required: true
        type: string
      responses:
        400:
          description: Record already sealed
        404:
          description: Record or image not found
        405:
          description: Validation exception
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerGetImageByFormTag}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
    delete:
      tags:
      - record
      summary: Delete an image in a record
      operationId: providerDeleteImageByFormTag
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: recordId
        in: path
        description: The record id
        required: true
        type: string
        format: uuid
      - name: formTag
        in: path
        description: The form tag for this image
        required: true
        type: string
      responses:
        400:
          description: Record already sealed
        404:
          description: Record or image not found
        405:
          description: Validation exception
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerDeleteImageByFormTag}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
  /provider/own_records:
    get:
      tags:
      - record
      summary: List your own records
      operationId: providerGetOwnRecords
      produces:
      - application/json
      - application/xml
      parameters:
      - name: status
        in: query
        description: Status values to filter by
        required: false
        type: array
        items:
          type: string
          enum:
          - empty
          - not_empty
          - sealed
          - not_sealed
          - patient_signed
          - not_patient_signed
          - provider_signed
          - not_provider_signed
          - has_labs
          - not_has_labs
        collectionFormat: multi
      - in: query
        name: offset
        type: integer
        required: false
        default: 0
        minimum: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        required: false
        default: 20
        minimum: 1
        maximum: 100
        description: The numbers of items to return.
      - in: query
        name: sort
        required: false
        type: array
        items:
          type: string
        default: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/RecordMetadata'
        400:
          description: Invalid status value
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerGetOwnRecords}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
  /provider/forms/country/{country}:
    get:
      tags:
      - record
      summary: List all forms for a country
      operationId: providerGetFormsByCountry
      produces:
      - application/json
      parameters:
      - in: query
        name: offset
        type: integer
        required: false
        default: 0
        minimum: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        required: false
        default: 20
        minimum: 1
        maximum: 100
        description: The numbers of items to return.
      - in: path
        name: country
        type: string
        required: true
        description: The ISO 2 letter country code from which forms should be listed
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/FormMetadata'
        400:
          description: Invalid status value
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerGetFormsByCountry}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
  /provider/form/{form_uuid}:
    get:
      tags:
      - record
      summary: Get the details on a form
      operationId: providerGetFormByUUID
      produces:
      - application/json
      parameters:
      - in: query
        name: offset
        type: integer
        required: false
        default: 0
        minimum: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        required: false
        default: 20
        minimum: 1
        maximum: 100
        description: The numbers of items to return.
      - in: path
        name: form_uuid
        type: string
        required: true
        description: The UUID of the form
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Form'
        400:
          description: Invalid status value
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_providerGetFormByUUID}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
definitions:
  RecordMetadata:
    type: object
    properties:
      form_id:
        type: string
        format: uuid
      createdAt:
        type: string
        format: date
      name:
        type: string
      age:
        type: number
      editedAt:
        type: string
        format: date
      form_contents:
        type: object
  Record:
    type: object
    properties:
      form_uuid:
        type: string
        format: uuid
      name:
        type: string
      form_contents:
        type: object
  FormMetadata:
    type: object
    properties:
      form_uuid:
        type: string
        format: uuid
      name:
        type: string
      subtitle:
        type: string
      country:
        type: string
      version:
        type: string
      tag:
        type: string
      form_id:
        type: string
  Form:
    type: object
    properties:
      form_uuid:
        type: string
        format: uuid
      form_details:
        type: object

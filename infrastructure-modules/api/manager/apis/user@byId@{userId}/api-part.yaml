swagger: '2.0'
info:
  description: |
    Medicapt API for user managers
  version: 1.0.0
  title: Medicapt API - User managers
  termsOfService: TODO
  contact:
    email: TODO@TODO.TODO
  license:
    name: TODO
    url: https://manager-api.dev.medicapt.click
securityDefinitions:
  CognitoUserProvider:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      type: cognito_user_pools
      providerARNs:
      - ${cognito_user_pool_manager_arn}
x-amazon-apigateway-gateway-responses:
  ACCESS_DENIED:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,POST,GET,OPTIONS,PUT,PATCH'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,POST,GET,OPTIONS,PUT,PATCH'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,POST,GET,OPTIONS,PUT,PATCH'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  MISSING_AUTHENTICATION_TOKEN:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,POST,GET,OPTIONS,PUT,PATCH'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
security:
  - CognitoUserProvider: []
schemes:
- https
paths:
  /manager/user/byId/{userId}:
    get:
      security:
      - CognitoUserProvider: []
      tags:
      - User
      summary: Get a user by ID
      operationId: managerGetUserById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: userId
        in: path
        description: ID of the user to return
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_managerGetUserById}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
    post:
      security:
      - CognitoUserProvider: []
      tags:
      - User
      summary: Update an existing user
      operationId: managerUpdateUserById
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: ID of the user to return
        required: true
        type: string
        format: uuid
      - in: body
        name: body
        description: Updated user
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        404:
          description: User not found
        405:
          description: Validation exception
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_managerUpdateUserById}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
    delete:
      security:
      - CognitoUserProvider: []
      tags:
      - User
      summary: Deletes a sssser
      operationId: managerDeleteUserById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: userId
        in: path
        description: ID of user to delete
        required: true
        type: string
        format: uuid
      responses:
        404:
          description: Record not found
        405:
          description: Record already sealed
      x-amazon-apigateway-integration:
        uri: ${lambda_uri_managerDeleteUserById}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "NEVER"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods : "'*'"
              method.response.header.Access-Control-Allow-Origin : "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
definitions:
  Empty: {}
  User:
    type: object
    properties:
      userUUID:
        type: string
        format: uuid
  Location:
    type: object
    properties:
      locationUUID:
        type: string
        format: uuid
      name:
        type: string
      form_contents:
        type: object
